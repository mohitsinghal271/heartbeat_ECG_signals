# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VUOyVr-NgnkQoDkuKpuWSqb9HEEHGmbm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, recall_score
from sklearn import metrics
import seaborn as sns

"""# New Section"""

# Load the dataset
train = pd.read_csv('/content/drive/MyDrive/HeartBeat/mitbih_train.csv/mitbih_train.csv')
test = pd.read_csv('/content/drive/MyDrive/HeartBeat/mitbih_test.csv/mitbih_test.csv')
# Display the first few rows of the dataset
print(train.head())

# Check for missing values
print(train.isnull().sum())

test.describe()

train.describe()

train = train.dropna()
train.isnull().sum()

test = test.dropna()
test.isnull().sum()

X_train = train.iloc[:, :-1]  # Select all columns except the last one
y_train = train.iloc[:, -1]   # Select the last column as the target variable

X_test = test.iloc[:, :-1]
y_test = test.iloc[:, -1]

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_test, y_test)

y_pred = model.predict(X_test)

print("Test accuracy:", metrics.accuracy_score(y_test, y_pred))
print("Test precision (micro):", metrics.precision_score(y_test, y_pred, average='micro'))
print("Test confusion matrix\n", metrics.confusion_matrix(y_test, y_pred))
print("Test Recall score\n", metrics.recall_score(y_test, y_pred, average='micro'))

conf_mat = metrics.confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues', xticklabels=['0', '1'], yticklabels=['0', '1'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix for Test Data')
plt.show()



ecg_data = X_train.iloc[0, :].values

time = np.arange(len(ecg_data))

plt.figure(figsize=(10, 6))
plt.plot(time, ecg_data, label='ECG Signal')
plt.title('ECG Signal for Heart Disease')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)
plt.show()

ecg_data = X_test.iloc[0, :].values

time = np.arange(len(ecg_data))

plt.figure(figsize=(10, 6))
plt.plot(time, ecg_data, label='ECG Signal')
plt.title('ECG Signal for Heart Disease')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)
plt.show()

